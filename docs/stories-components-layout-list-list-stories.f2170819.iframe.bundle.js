"use strict";(globalThis.webpackChunk_hiroyoshi_mori_react_components_bulma=globalThis.webpackChunk_hiroyoshi_mori_react_components_bulma||[]).push([[258],{"./src/stories/components/layout/list/list.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,InConsistent:()=>InConsistent,WithAttributes:()=>WithAttributes,WithDatasets:()=>WithDatasets,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__}),__webpack_require__("./node_modules/react/index.js");var _components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={component:_components__WEBPACK_IMPORTED_MODULE_1__.aV,tags:["autodocs"]},Default={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components__WEBPACK_IMPORTED_MODULE_1__.aV,{items:{data:[{columns:[{value:"Column A"},{value:"Column B"},{value:"Column C"},{value:"Column D"},{value:"Column E"},{value:"Column F"}]},{columns:[{value:"Column 2A"},{value:"Column 2B"},{value:"Column 2C"},{value:"Column 2D"},{value:"Column 2E"},{value:"Column 2F"}]}],type:"default"},headers:[{value:"Header A"},{value:"Header B"},{value:"Header C"},{value:"Header D"},{value:"Header E"},{value:"Header F"}],...args})},InConsistent={...Default,args:{items:{data:[{columns:[{value:"Column A"},{value:"Column B"},{value:"Column C"},{value:"Column D"},{value:"Column E"},{value:"Column F"},{value:"Column G"}]},{columns:[{value:"Column 2A"},{value:"Column 2B"},{value:"Column 2C"},{value:"Column 2D"},{value:"Column 2E"}]}]}}},WithAttributes={...Default,args:{headers:[{value:"Header A",attributes:{"aria-label":"List Header"}},{value:"Header B",attributes:{"aria-label":"List Header"}},{value:"Header C",attributes:{"aria-label":"List Header"}},{value:"Header D",attributes:{"aria-label":"List Header"}},{value:"Header E",attributes:{"aria-label":"List Header"}},{value:"Header F",attributes:{"aria-label":"List Header"}}],items:{data:[{columns:[{value:"Column A",attributes:{"aria-label":"List Column"}},{value:"Column B",attributes:{"aria-label":"List Column"}},{value:"Column C",attributes:{"aria-label":"List Column"}},{value:"Column D",attributes:{"aria-label":"List Column"}},{value:"Column E",attributes:{"aria-label":"List Column"}},{value:"Column F",attributes:{"aria-label":"List Column"}}],attributes:{"aria-label":"List Columns"}}]},attributes:{wrap:{"aria-label":"List"},header:{"aria-label":"List Headers"}}}},WithDatasets={...Default,args:{headers:[{value:"Header A",datasets:new Map([["id","header"],["name","header A"]])},{value:"Header B",datasets:new Map([["id","header"],["name","header B"]])},{value:"Header C",datasets:new Map([["id","header"],["name","header C"]])}],items:{data:[{columns:[{value:"Column A",datasets:new Map([["id","column"],["name","column A"]])},{value:"Column B",datasets:new Map([["id","column"],["name","column B"]])},{value:"Column C",datasets:new Map([["id","column"],["name","column C"]])}],datasets:new Map([["id","list-column"],["name","List column"]])}]},datasets:{wrap:new Map([["id","wrap"],["name","list-wrap"]]),header:new Map([["id","header"],["name","list-header"]])}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: (args: any) => <List items={{\n    data: [{\n      columns: [{\n        value: "Column A"\n      }, {\n        value: "Column B"\n      }, {\n        value: "Column C"\n      }, {\n        value: "Column D"\n      }, {\n        value: "Column E"\n      }, {\n        value: "Column F"\n      }]\n    }, {\n      columns: [{\n        value: "Column 2A"\n      }, {\n        value: "Column 2B"\n      }, {\n        value: "Column 2C"\n      }, {\n        value: "Column 2D"\n      }, {\n        value: "Column 2E"\n      }, {\n        value: "Column 2F"\n      }]\n    }],\n    type: \'default\'\n  }} headers={[{\n    value: \'Header A\'\n  }, {\n    value: \'Header B\'\n  }, {\n    value: \'Header C\'\n  }, {\n    value: \'Header D\'\n  }, {\n    value: \'Header E\'\n  }, {\n    value: \'Header F\'\n  }]} {...args} />\n}',...Default.parameters?.docs?.source}}},InConsistent.parameters={...InConsistent.parameters,docs:{...InConsistent.parameters?.docs,source:{originalSource:'{\n  ...Default,\n  args: {\n    items: {\n      data: [{\n        columns: [{\n          value: "Column A"\n        }, {\n          value: "Column B"\n        }, {\n          value: "Column C"\n        }, {\n          value: "Column D"\n        }, {\n          value: "Column E"\n        }, {\n          value: "Column F"\n        }, {\n          value: "Column G"\n        }]\n      }, {\n        columns: [{\n          value: "Column 2A"\n        }, {\n          value: "Column 2B"\n        }, {\n          value: "Column 2C"\n        }, {\n          value: "Column 2D"\n        }, {\n          value: "Column 2E"\n        }]\n      }]\n    }\n  }\n}',...InConsistent.parameters?.docs?.source}}},WithAttributes.parameters={...WithAttributes.parameters,docs:{...WithAttributes.parameters?.docs,source:{originalSource:"{\n  ...Default,\n  args: {\n    headers: [{\n      value: 'Header A',\n      attributes: {\n        'aria-label': 'List Header'\n      }\n    }, {\n      value: 'Header B',\n      attributes: {\n        'aria-label': 'List Header'\n      }\n    }, {\n      value: 'Header C',\n      attributes: {\n        'aria-label': 'List Header'\n      }\n    }, {\n      value: 'Header D',\n      attributes: {\n        'aria-label': 'List Header'\n      }\n    }, {\n      value: 'Header E',\n      attributes: {\n        'aria-label': 'List Header'\n      }\n    }, {\n      value: 'Header F',\n      attributes: {\n        'aria-label': 'List Header'\n      }\n    }],\n    items: {\n      data: [{\n        columns: [{\n          value: \"Column A\",\n          attributes: {\n            'aria-label': 'List Column'\n          }\n        }, {\n          value: \"Column B\",\n          attributes: {\n            'aria-label': 'List Column'\n          }\n        }, {\n          value: \"Column C\",\n          attributes: {\n            'aria-label': 'List Column'\n          }\n        }, {\n          value: \"Column D\",\n          attributes: {\n            'aria-label': 'List Column'\n          }\n        }, {\n          value: \"Column E\",\n          attributes: {\n            'aria-label': 'List Column'\n          }\n        }, {\n          value: \"Column F\",\n          attributes: {\n            'aria-label': 'List Column'\n          }\n        }],\n        attributes: {\n          'aria-label': 'List Columns'\n        }\n      }]\n    },\n    attributes: {\n      wrap: {\n        'aria-label': 'List'\n      },\n      header: {\n        'aria-label': 'List Headers'\n      }\n    }\n  }\n}",...WithAttributes.parameters?.docs?.source}}},WithDatasets.parameters={...WithDatasets.parameters,docs:{...WithDatasets.parameters?.docs,source:{originalSource:"{\n  ...Default,\n  args: {\n    headers: [{\n      value: 'Header A',\n      datasets: new Map([['id', 'header'], ['name', 'header A']])\n    }, {\n      value: 'Header B',\n      datasets: new Map([['id', 'header'], ['name', 'header B']])\n    }, {\n      value: 'Header C',\n      datasets: new Map([['id', 'header'], ['name', 'header C']])\n    }],\n    items: {\n      data: [{\n        columns: [{\n          value: \"Column A\",\n          datasets: new Map([['id', 'column'], ['name', 'column A']])\n        }, {\n          value: \"Column B\",\n          datasets: new Map([['id', 'column'], ['name', 'column B']])\n        }, {\n          value: \"Column C\",\n          datasets: new Map([['id', 'column'], ['name', 'column C']])\n        }],\n        datasets: new Map([['id', 'list-column'], ['name', 'List column']])\n      }]\n    },\n    datasets: {\n      wrap: new Map([['id', 'wrap'], ['name', 'list-wrap']]),\n      header: new Map([['id', 'header'], ['name', 'list-header']])\n    }\n  }\n}",...WithDatasets.parameters?.docs?.source}}};let __namedExportsOrder=["Default","InConsistent","WithAttributes","WithDatasets"]}}]);